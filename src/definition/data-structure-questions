Please answer the below Data Structure Questions:

why do we need data structure?
A. we need it because it is very important because it helps us to organize and store data in way that is easy to use.
- we need it because it is an essential tool for organizing and manipulating data in a way that is efficient and effective.


What are the various operations that can be performed on different Data Structures?
- Arrays, linked lists, Queues, hash tables, Heaps, sets. Maps

List out the areas in which data structures are applied extensively?
-Database systems, Operating systems, Computer networks, Compilers, Graphics and visualization,
 Artificial intelligence, Data mining..

what is an Array?
- an array is a tool that we use when we know the size of our data
it is used in java to store a collection of elements of the same data type.

what is the difference between the Array and ArrayList?
- one of the most differences between the Array and ArrayList is the size, that means that the array size is fixed and
cannot be changed it has been created.while, the ArrayLists are dynamic, it can grow. in addition to that the array
can only store elements of a single data type. But the ArrayList can store elements of any data type and do not need
to be specified when the ArrayList is created.

what is LinkedList?
-linked list is a data is a kind of storage that store elements in a linear fashion, each element contains a link that
links between the next element in the list. the linked list works by the nodes to link  between the elements.

How is an Array different from Linked List?
-the size of the array is a fixed and cannot be changed, and it comes in a linear data structure, also in terms
of element access the array elements can be accessed directly using their index, so the time complexity of accessing
an element in an array is constant. on the other hand, the size in the linked list is dynamic, that means that it can
grow. in addition to that, it comes in a format of nodes, each node stores a value and a reference (link) to the next
node. finally, the element access must be accessed sequentially, starting from the head of the list.

what is queue?
- a queue is a first in first out data structure
- a queue is a linear data structure that is open at both its ends

what is stack?
a stack is a data store that follows the structure of LIFO last in first out. the last element added should be removed
first

what is FIFO and LIFO?
-FIFO stands for first in first out. LIFO stands for last in first out. the two elements are methods for organizing and
managing data in a linear data structure, such as a stack or a queue.

what is the order of complexity?
-The order of complexity is a technique to describe a problem-solving approach based on the time and space the problem
needs.

what is the best case to search an element from an array?
-The best case for searching an element from an array is when the element is found at the beginning of the array.

what is the worst case to search an element from an array?
-the worst case to search an element from an array is when the element is not present in the array, in addition to
 that if it is the last element in the array.

what is tree in data structure?
-a tree in data structure is a data structure that consists of nodes organized in a hierarchy.

what is graph in data structure?
-A graph is a data structure that consists of a finite set of vertices (also called nodes) and a set of edges
connecting these vertices. Graphs in data structures are used to address real-world problems.

what is the difference between the HashTable and HashMap?
-the difference between the two classes HashMap and Hashtable is the HashMap is not synchronized and Hashtable is
synchronized and this makes the HashMap faster than Hashtable but not safe. on the other hand, HashMap allows null
keys and null values, while Hashtable does not allow null keys or values. In addition to that, HashMap is part of
the Java Collection Framework, while Hashtable is a legacy class.

What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.
-In RDBMS the major data structures used are tables, rows, and columns.
-In a Network data model, the major data structure is the graph.
-In a Hierarchical data model, the major data structure is the tree

How HashMap works in java?
-the HashMap works in java by using hash tables to store elements. so, when you create a HashMap object, you can specify
the initial capacity and load factor as arguments. in addition to that, when you put a key-value pair into the HashMap
using the put() method, the key is hashed using a hash function to determine the index at which the value will be
stored in the hash table. ans, when you retrieve a value from the HashMap using the get() method, the key is again
hashed to determine the index at which the value is stored.

What is ArrayIndexOutOfBoundsException in java? When it occurs?
-ArrayIndexOutOfBoundsException is a runtime exception that occurs when you try to access an element of an array with an
index that is outside the bounds of the array.

What are the different ways of copying an array into another array?
-Copying element by element
-Using the clone() method
-Using the System.arraycopy() method

What is difference between an array and a linked list?
-the difference between an array and a linked list is
first the size, An array has a fixed size, but the linked list can grow or shrink dynamically as elements are added or
removed. secondly, the access time,Arrays allow constant-time access to any element, since the elements are stored in
contiguous memory locations and can be accessed using their indices. Linked lists, on the other hand, require linear
time to access an element, since you have to follow the references from one node to the next until you reach the
desired element. Finally, there's also a big difference in the insertion and deletion and also memory usage between
arrays and linked lists.

What is DFS and BFS?
-DFS stands for Depth-First Search and BFS stands for Breadth-First Search. So, they are two algorithms for traversing
a graph or tree data structure.
-BFS finds the shortest path to the destination, whereas DFS goes to the bottom of a subtree, then backtracks.

What is Recursion?
-Recursion is a technique in which a function calls itself with a modified version of its own input.
It is a way of defining a function in terms of itself.

What are linear and non linear data Structures?
-Linear data structures are those in which the data elements are arranged in a linear sequence.
-Non-linear data structures are those in which the data elements are not arranged in a linear sequence.
What is Big-(O)-notation?
-Big-O notation is a way of expressing the time complexity of an algorithm, which is a measure of how long an algorithm
takes to run as a function of the size of the input.

Outlined different kind of sorting algorithm with time complexity?
-Best Time Complexity: Define the input for which algorithm takes less time or minimum time.
In the best case calculate the lower bound of an algorithm. Example: In the linear search when search data is present
at the first location of large data then the best case occurs.

-Average Time Complexity: In the average case take all random inputs and calculate the computation time for all inputs.
And then we divide it by the total number of inputs.
-Worst Time Complexity: Define the input for which algorithm takes a long time or maximum time. In the worst calculate
the upper bound of an algorithm. Example: In the linear search when search data is present at the last location of large
data then the worst case occurs.

Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.

Data      Accessing Element 	Inserting Element	Searching Element	Removing Element
Array	      O(1)	                 O(n)	                   O(n)	             O(n)
Linked List   O(n)	                 O(1)	                   O(n)	             O(1)
Stack	      O(n)	                 O(1)	                   O(n)	             O(1)
Queue	      O(n)	                 O(1)	                   O(n)	             O(1)
Hash Table	  O(1)	                 O(1)                      O(1)	             O(1)
BST           O(h)	                 O(h)	                   O(h)	             O(h)
Heap	      O(n)              	O(logn)                    O(n)	           O(logn)
Graph	      O(n)	                O(1)	                   O(n)	             O(n)

